<Grid>
        <Grid.Resources>
            <Style  x:Key="DefaultTreeViewItem" TargetType="{x:Type TreeViewItem}">
                <Setter Property="MinHeight" Value="25" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="SnapsToDevicePixels" Value="True" />

                <Setter Property="Margin" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <ControlTemplate.Resources>
                                <convers:IndentConverter  x:Key="indentConverter"/>
                            </ControlTemplate.Resources>
                            <Grid Background="Transparent">
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border Name="itemBackground" Background="{TemplateBinding Background}"  
                                BorderBrush="{TemplateBinding BorderBrush}"  
                                BorderThickness="{TemplateBinding BorderThickness}"  
                                Padding="{TemplateBinding Padding}">
                                    <Grid Background="Transparent">
                                        <Grid x:Name="ItemRoot" Margin="{Binding Converter={StaticResource indentConverter},RelativeSource={RelativeSource TemplatedParent}}" Background="Transparent">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="16" />
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>

                                            <ToggleButton x:Name="Expander" HorizontalAlignment="Left" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                                                <ToggleButton.Style>
                                                    <Style TargetType="{x:Type ToggleButton}">
                                                        <Setter Property="Focusable" Value="False"/>
                                                        <Setter Property="Width" Value="16"/>
                                                        <Setter Property="Height" Value="16"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                    <Border Background="Transparent" Height="16" Padding="5" Width="16">
                                                                        <Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" Fill="#66645e" Stroke="#66645e">
                                                                            <Path.RenderTransform>
                                                                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                                                            </Path.RenderTransform>
                                                                        </Path>
                                                                    </Border>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsChecked" Value="True">
                                                                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                                                                <Setter.Value>
                                                                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                            <Setter Property="Fill" TargetName="ExpandPath" Value="#66645e"/>
                                                                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#66645e"/>
                                                                        </Trigger>
                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#66645e"/>
                                                                            <Setter Property="Fill" TargetName="ExpandPath" Value="#66645e"/>
                                                                        </Trigger>
                                                                        <MultiTrigger>
                                                                            <MultiTrigger.Conditions>
                                                                                <Condition Property="IsMouseOver" Value="True"/>
                                                                                <Condition Property="IsChecked" Value="True"/>
                                                                            </MultiTrigger.Conditions>
                                                                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#66645e"/>
                                                                            <Setter Property="Fill" TargetName="ExpandPath" Value="#66645e"/>
                                                                        </MultiTrigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </ToggleButton.Style>
                                            </ToggleButton>
                                            <ContentPresenter Grid.Column="1" x:Name="PART_Header" ContentSource="Header"  
                                                 HorizontalAlignment="Stretch" >

                                            </ContentPresenter>
                                        </Grid>
                                    </Grid>

                                </Border>
                                <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding IsGrouping}" Value="false">
                                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                                </DataTrigger>
                                <Trigger Property="HasItems" Value="False">
                                    <Setter Property="Visibility" TargetName="Expander" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsExpanded" Value="False">
                                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                                </Trigger>

                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" TargetName="itemBackground" Value="#FAE388"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsFocused" Value="False"/>
                                        <Condition SourceName="itemBackground" Property="IsMouseOver" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value=" #fceeb9" TargetName="itemBackground"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DefaultTreeView" TargetType="{x:Type TreeView}">
                <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
                <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"></Setter>
                <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
                <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultTreeViewItem}"></Setter>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsItemsHost="True" Margin="0"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Grid.Resources>
        <TreeView Name="tree" Style="{StaticResource DefaultTreeView}">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Paths}">
                    <TextBlock Text="{Binding name}"></TextBlock>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
    
    public MainWindow()
        {
            InitializeComponent();
            tree.ItemsSource = GetAllFiles(@"D:\SampleData2");
        }
        public List<Directo> GetAllFiles(string path)
        {
            List<Directo> l = new List<Directo>();//当前路径下的所有对象
            DirectoryInfo d = new DirectoryInfo(path);//当前路径
            foreach (var dd in d.GetFileSystemInfos())//拿到所有文件和文件夹
            {
                var p = dd.FullName;
                //文件
                if (File.Exists(p))
                {
                    l.Add(new Directo() { name=dd.Name});
                }
                //文件夹
                if (Directory.Exists(p))
                {
                    l.Add(new Directo() { name = dd.Name,Paths=GetAllFiles(p) });            
                }
            }
            return l;
        }
        public class Directo
        {
            public Directo() { Paths = new List<Directo>(); }
            public List<Directo> Paths { get; set; }//用来存放当前路径下的所有文件
            public string name { get; set; }//存文件或文件夹名字
        }
