//自定义一个面板
    class PanelOne : Panel
    {
        private List<Visual> visuals = new List<Visual>();
        protected override Visual GetVisualChild(int index)
        {
            return visuals[index];
        }

        protected override int VisualChildrenCount
        {
            get
            {
                return visuals.Count;
            }
        }
        public void AddVisual(Visual v)
        {
            visuals.Add(v);
            base.AddLogicalChild(v);//用来注册可视化对象
            base.AddVisualChild(v);
        }

        public void DeleteVisual(Visual v)
        {
            visuals.Remove(v);
            base.RemoveLogicalChild(v);
            base.RemoveVisualChild(v);
        }
        //得到当前的可视化对象
        public DrawingVisual GetVisual(Point p)
        {
            HitTestResult htr = VisualTreeHelper.HitTest(this,p);//返回命中测试最顶层的对象
            return htr?.VisualHit as DrawingVisual;
        }
    }
    
    <Window x:Class="MyPanel.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MyPanel" MouseLeftButtonDown="Window_MouseLeftButtonDown" MouseRightButtonDown="Window_MouseRightButtonDown"
        mc:Ignorable="d" 
        Title="MainWindow" Height="350" Width="525" WindowStartupLocation="CenterScreen" ResizeMode="NoResize" WindowStyle="ToolWindow" >
    <local:PanelOne x:Name="PanelOne"></local:PanelOne>
</Window>


/// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            //DrawingVisual dv = new DrawingVisual();
            //DrawingContext dc = dv.RenderOpen();
            //Brush brush = Brushes.LightGreen;
            //Pen p = new Pen(Brushes.SteelBlue,3);
            //dc.DrawRectangle(brush,p,new Rect(new Point(5,5),new Size(100,200)));
            //dc.DrawEllipse(brush,p,new Point(250,250),200,100);
            //dc.DrawLine(p,new Point(0,120),new Point(50,180));
            //dc.DrawLine(p, new Point(50, 180), new Point(0, 180));
            //dc.DrawLine(p, new Point(0, 180), new Point(0, 120));
            //dc.Close();
            //PanelOne.AddVisual(dv);
        }
        //左键添加
        private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            Point p = e.GetPosition(PanelOne);//在面板中获取鼠标当前坐标点
            DrawingVisual dv = new DrawingVisual();
            DrawSquare(dv, p);
            PanelOne.AddVisual(dv);//将当前的可视化对象加入面板中
        }
        //右键删除
        private void Window_MouseRightButtonDown(object sender, MouseButtonEventArgs e)
        {
            Point p = e.GetPosition(PanelOne);
            DrawingVisual dv = PanelOne.GetVisual(p);
            PanelOne.DeleteVisual(dv);
        }
        //画正方形
        //DrawingVisual 可视化对象
        //DrawingContext 绘制对象
        //Pen 画笔
        private void DrawSquare(DrawingVisual dv,Point p)
        {
            DrawingContext dc = dv.RenderOpen();
            Brush brush = Brushes.LightGreen;
            Pen pen = new Pen(Brushes.SteelBlue,3);
            dc.DrawRectangle(brush,pen,new Rect(p,new Size(40, 40)));
            dc.Close();
        }
    }
